package CONTROL;

import kr.ac.kaist.swrc.jhannanum.hannanum.Workflow;
import kr.ac.kaist.swrc.jhannanum.hannanum.WorkflowFactory;


import java.io.FileNotFoundException;
import java.io.IOException;

import kr.ac.kaist.swrc.jhannanum.hannanum.Workflow;
import kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.MorphAnalyzer.ChartMorphAnalyzer.ChartMorphAnalyzer;
import kr.ac.kaist.swrc.jhannanum.plugin.MajorPlugin.PosTagger.HmmPosTagger.HMMTagger;
import kr.ac.kaist.swrc.jhannanum.plugin.SupplementPlugin.MorphemeProcessor.SimpleMAResult09.SimpleMAResult09;
import kr.ac.kaist.swrc.jhannanum.plugin.SupplementPlugin.MorphemeProcessor.SimpleMAResult22.SimpleMAResult22;
import kr.ac.kaist.swrc.jhannanum.plugin.SupplementPlugin.MorphemeProcessor.UnknownMorphProcessor.UnknownProcessor;
import kr.ac.kaist.swrc.jhannanum.plugin.SupplementPlugin.PlainTextProcessor.InformalSentenceFilter.InformalSentenceFilter;
import kr.ac.kaist.swrc.jhannanum.plugin.SupplementPlugin.PlainTextProcessor.SentenceSegmentor.SentenceSegmentor;
import kr.ac.kaist.swrc.jhannanum.plugin.SupplementPlugin.PosProcessor.SimplePOSResult09.SimplePOSResult09;
import kr.ac.kaist.swrc.jhannanum.plugin.SupplementPlugin.PosProcessor.SimplePOSResult22.SimplePOSResult22;


public class Hannanum {


	public static String getResult(String sentence)
	{
		String[] array = sentence.split("\n");
		String result = "";
		int length = array.length;
		
		for(int i=0; i<length; i++)
		{
			String tmp = array[i];
			if(tmp.contains("\t"))
			{
				String[] list = tmp.split("\t");
				tmp = list[1];
			}
			if(tmp.contains("/"))
			{
				result = result + tmp + "\n";
			}
		}
		
		return result;
	}
	
	public static String extractVerb(String sentence)
	{
		
		if(sentence.contains("/P"))
		{
			String[] temp = sentence.split("/P");
			return 	temp[0];
		}
		return "";
	}
	
	public static String extractNoun(String sentence)
	{
		
		if(sentence.contains("/N"))
		{
			String[] temp = sentence.split("/P");
			return 	temp[0];
		}
		return "";
	}
	
	
	public static void ManualWorkflowSetUp () {
		Workflow workflow = new Workflow();
		
		try {
			/* Setting up the work flow */
			/* Phase1. Supplement Plug-in for analyzing the plain text */
			workflow.appendPlainTextProcessor(new SentenceSegmentor(), null);
			workflow.appendPlainTextProcessor(new InformalSentenceFilter(), null);
			
			workflow.setMorphAnalyzer(new ChartMorphAnalyzer(), "conf/plugin/MajorPlugin/MorphAnalyzer/ChartMorphAnalyzer.json");
			workflow.appendMorphemeProcessor(new UnknownProcessor(), null);

			workflow.setPosTagger(new HMMTagger(), "conf/plugin/MajorPlugin/PosTagger/HmmPosTagger.json");
			

			workflow.activateWorkflow(true);
		
			String document = "10%감소했다를 읽을 때, 퍼센트라고 읽든 프로라고 있든 상관없나요?";
			
			workflow.analyze(document);
			System.out.println(workflow.getResultOfDocument());
			
			workflow.close();
			
		} catch (FileNotFoundException e) {
			e.printStackTrace();
			System.exit(0);
		} catch (IOException e) {
			e.printStackTrace();
			System.exit(0);
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		/* Shutdown the workflow */
		workflow.close();  	
	}
	
	public static void main(String[] args) 
	{

/*		Workflow workflow = WorkflowFactory.getPredefinedWorkflow(WorkflowFactory.WORKFLOW_POS_SIMPLE_09);
		
		try {
			workflow.activateWorkflow(true);

			String document = "Francis Fukuyama 라는 인명을 프랜시스 푸쿠야마가 아닌, 프랜시스 후쿠야마로 쓰는 이유가 궁금합니다.";
			
			workflow.analyze(document);
			
			System.out.println(workflow.getResultOfDocument());
			String tmp = getResult(workflow.getResultOfDocument());
			
			System.out.println(extractVerb(tmp));

			workflow.close();
			
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(0);
		}
		
		workflow.close();  	
	*/
		
		ManualWorkflowSetUp();
	}
}
