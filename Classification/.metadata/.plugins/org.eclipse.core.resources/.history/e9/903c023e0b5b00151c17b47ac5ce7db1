package CONTROL;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

import kr.kaist.ir.korean.data.TaggedSentence;
import kr.kaist.ir.korean.data.TaggedWord;
import kr.kaist.ir.korean.parser.KkokkomaParser;
import DATA.*;

import org.snu.ids.ha.ma.MExpression;
import org.snu.ids.ha.ma.MorphemeAnalyzer;
import org.snu.ids.ha.ma.Sentence;
import org.snu.ids.ha.util.Timer;

public class ExtractTopic {

	QADB qadb = null;
	KkokkomaParser iParser = null;
	
	public void maTest()
	{
		String string = "저는 대학생이구요. 소프트웨어 관련학과 입니다. DB는 수업을 한번 들은 적이 있으며, 수학은 대학에서 통계학, 선형대수학, 이산수학, 대학수학 등을 배웠지만... 자주 사용을 안하다보니 모두 까먹은 상태입니다.";
		try {
			MorphemeAnalyzer ma = new MorphemeAnalyzer();
			ma.createLogger(null);
			Timer timer = new Timer();
			timer.start();
			List<MExpression> ret = ma.analyze(string);
			timer.stop();
			timer.printMsg("Time");

			ret = ma.postProcess(ret);

			ret = ma.leaveJustBest(ret);

			List<Sentence> stl = ma.divideToSentences(ret);
			for( int i = 0; i < stl.size(); i++ ) {
				Sentence st = stl.get(i);
				System.out.println("=============================================  " + st.getSentence());
				for( int j = 0; j < st.size(); j++ ) {
					System.out.println(st.get(j));
				}
			}

			ma.closeLogger();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}


	public void keTest()
	{
		String strToExtrtKwrd = "저는 대학생이구요. 소프트웨어 관련학과 입니다. DB는 수업을 한번 들은 적이 있으며, 수학은 대학에서 통계학, 선형대수학, 이산수학, 대학수학 등을 배웠지만... 자주 사용을 안하다보니 모두 까먹은 상태입니다.";

		KeywordExtractor ke = new KeywordExtractor();
		KeywordList kl = ke.extractKeyword(strToExtrtKwrd, true);
		for( int i = 0; i < kl.size(); i++ ) {
			Keyword kwrd = kl.get(i);
			System.out.println(kwrd.getString() + "\t" + kwrd.getCnt());
		}
	}
	
	public ExtractTopic(String dbName)
	{
		qadb = new QADB(dbName);
		iParser = new KkokkomaParser();
	}
	
	public void extractTopic(String type)
	{
		ArrayList<QA> qaList = qadb.selectCQA();
		
		for(int i=0; i<2; i++)
		{
			QA q = qaList.get(i);
			splitSentece(q, type);
		}
	}

	public void splitSentece(QA qa, String type)
	{
		ArrayList<String> sentenceList = new ArrayList<String>();
		String sentence = "";
		String nextSentence = "";
		
		if(type.equals("Q"))
		{
			sentence = qa.getQuestion();
		}
		else
		{
			sentence = qa.getAnswer();
		}
		sentenceList.add(sentence);
		int id = qa.getNum();
		int index = -1;
		for(int i=0; i< sentenceList.size(); i++)
		{
			sentence = sentenceList.get(i);
			try {
				TaggedSentence ts = iParser.dependencyOf(sentence);
				
				nextSentence = ts.getOriginalString(null);
				System.out.println(id + " : " + nextSentence+ " : " + i +  " : " +  type );
				System.out.println(ts.toString());
	//			getDepedent(id, i,ts, type);
				
				index = getIndex(sentence, nextSentence);
				if(index < sentence.length())
				{
					nextSentence = sentence.substring(index);
					sentenceList.add(nextSentence);
				}
			
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
		}
	}
	
	public int getIndex(String sentence, String splitSentence)
	{
		int j =0; 
		int i =0;
		char a  = ' ';
		char b = ' ';
		while(true)
		{
			if(sentence.length() <= i | splitSentence.length() <= j)
				break;
			a = sentence.charAt(i);
			b = splitSentence.charAt(j);
			if(a == ' ')
			{
				i++;
				if(sentence.length() <= i)
					break;
				a = sentence.charAt(i);
			}
			if(b == ' ')
			{
				j++;
				if(splitSentence.length() <= j)
					break;
				b = splitSentence.charAt(j);
			}
			
			if( a == b)
			{
				i++;
				j++;
			}
			else
			{
				break;
			}
		}
		return i;
	}
	
	public void getDepedent(int id, int index, TaggedSentence ts, String type)
	{
		ArrayList<String> depList = new ArrayList<String>();
		ArrayList<TaggedWord> tagList = new ArrayList<TaggedWord>();
		String dep = "";
		Queue<TaggedWord> tagQueue = new LinkedList<TaggedWord>();
		
	//	System.out.println(ts.toString());
		LinkedList<TaggedWord> dependentList = null;
		TaggedWord current = ts.getRoot();
		
		while(true)
		{
			while(current != null)
			{
				dependentList = current.getDependents();
				TaggedWord word;
			
			}
		}
		
	}
	
	
	public void getKeyword()
	{
		
	}

	
}
