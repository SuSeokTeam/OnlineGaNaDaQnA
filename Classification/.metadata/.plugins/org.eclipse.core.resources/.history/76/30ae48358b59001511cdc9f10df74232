package CONTROL;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.LinkedList;

import javax.security.auth.login.Configuration;

import DATA.Dependent;
import DATA.Morph;
import DATA.Word;
import kr.kaist.ir.korean.data.ConflictedWord;
import kr.kaist.ir.korean.data.TaggedMorpheme;
import kr.kaist.ir.korean.data.TaggedSentence;
import kr.kaist.ir.korean.data.TaggedWord;
import kr.kaist.ir.korean.parser.HannanumParser;
import kr.kaist.ir.korean.parser.IntegratedParser;
import kr.kaist.ir.korean.parser.KkokkomaParser;
import kr.kaist.ir.korean.parser.Parser;

public class ExtractKeyword {
	
	ArrayList<ArrayList<TaggedWord>> classfier = new ArrayList<ArrayList<TaggedWord>>();
	ArrayList<String> josaList = new ArrayList<String>();
//	ArrayList<String> sentenceList = new ArrayList<String>();
	KkokkomaParser iParser;
	
	public void ExtractKeyword()
	{
		iParser = new KkokkomaParser();
	}
	
	public void parseJosa() throws Exception
	{
	 	String path = "C://Users//수인//Desktop//시프//조사//조사_기초.txt";
		
		FileInputStream fileInputStream = new FileInputStream(path);
		InputStreamReader inputStreamReader = new InputStreamReader(fileInputStream, "MS949");
		BufferedReader bufferedReader = new BufferedReader(inputStreamReader);
		boolean check = false;
		boolean result= true;
		int i=0;
		while(result)
		{		
			String str = bufferedReader.readLine();
		
			if(str == null)
			{
				result = false;
				
			}
			else
			{
				for(int j = 0; j<str.length(); j++)
				{
					char c = str.charAt(j);
					if((c >= '\uAC00' && c<= '\uD7AF'))
					{
							
					}
					else
					{
						check = true;
						break;
					}
				}
				
				if(str.length() == 0)
				{
					check = true; 
				}

				
				if(!check)
				{
			//		System.out.println(str);
					josaList.add(str);
					i++;
				}
				check = false;
			}
			
		}
		
		bufferedReader.close();
		inputStreamReader.close();
		fileInputStream.close();
	}
	
	public void classfiWord(String word)
	{
		
	}
	
	
	public ArrayList<String> splitSpace(String sentence)
	{
		String[] arr = sentence.split(" ");
		ArrayList<String> frequencyWordList = new ArrayList<String>();
		String word = "";
		char c;
		String punctuation[] = {"(", "[" , ")", " ]" ,"{" , "}","'","\"",",",".", "?"};
		String msg = "";
		
		for(int i=0; i < arr.length; i++)
		{
			word = arr[i];
			msg = word;
			
			for(int j=0 ; j<punctuation.length ; j++)
			{
				String punc = punctuation[j];
				if(word.contains(punc))
	 			{	
	 				int index = word.indexOf(punc);
	 				if(index > 0)
	 					msg =  word.substring(0, index);
	 				else
	 			//		msg = word.substring();
	 				break;
	 			}
			}
			if(msg.length() != 0)
			{
				System.out.println(msg);
				frequencyWordList.add(msg);
			}
		}
		System.out.println("=====");
		return frequencyWordList;
	}

	public void getString()
	{
	//	Parser iParser = null;
		try {
			Parser iParser = new IntegratedParser();
			TaggedSentence s = iParser.dependencyOf("학창시절, 학창 시절 중 띄어쓰기는 어떤 게 맞나요?");
			System.out.println(s.toString());
			//hp = new HannanumParser();
			//hp.dependencyOf(arg0)
			
			iParser = new IntegratedParser();
			s = iParser.dependencyOf("맑다의 발음이 뭔가요?");
			System.out.println(s.toString());
			
			KkokkomaParser iParser3 = new KkokkomaParser();
			s = iParser3.dependencyOf("학창시절, 학창 시절 중 띄어쓰기는 어떤 게 맞나요?");
			System.out.println(s.toString());
			
			HannanumParser iParser4 = new HannanumParser();
			s = iParser4.dependencyOf("학창시절, 학창 시절 중 띄어쓰기는 어떤 게 맞나요?");
			System.out.println(s.toString());
			
			System.out.println("**");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	
	public void extractKeyword(String sentence)
	{
	
		ArrayList<String> sentenList = new ArrayList<String>();
		sentenList.add(sentence);
		
		try
		{

			String nextSentence = null;
	
			for(int i=0 ; i<sentenList.size(); i++)
			{
				iParser = new KkokkomaParser();
				
				nextSentence = sentenList.get(i);
				System.out.println(nextSentence);
				TaggedSentence s = iParser.dependencyOf(new String(nextSentence));
				
				for(int j=0 ;j<s.size(); j++)
				{
					TaggedWord w = s.getWordAt(j);
					System.out.print(w.getOriginalWord() + " : " );
					
					LinkedList<TaggedWord> listWord= w.getDependents();
					
					for(TaggedWord tw : listWord)
					{
						System.out.print(tw.getOriginalWord() + " , " );
					}
					System.out.println();
				}
				
				String lastWord = s.getOriginalString(null);
				
				int index = -1;
				
				if(!nextSentence.equals(lastWord))
				{
					index = nextSentence.indexOf(lastWord);
					index += lastWord.length();
					
					if(index+1 <= nextSentence.length())
					{
						String newString = nextSentence.substring(index+1, nextSentence.length());
						sentenList.add(newString);
					}
				}
				System.out.println();
			}
			
		}
		catch(Exception e)
		{
			e.getStackTrace();
		}
	}
	
	public void getDependent(String sentence)
	{
	//	Parser iParser = null;
		ArrayList<Word> wordList = new ArrayList<Word>();
		
		ArrayList<String> sentenList = new ArrayList<String>();
		sentenList.add(sentence);
		
		try
		{
		//	Parser iParser = new IntegratedParser();
		//	TaggedSentence s = null;
			String nextSentence = null;
			int lastIndex = -1;
			int firstIndex = 0;
			String prevSentence = null;
			
			for(int i=0 ; i<sentenList.size(); i++)
			{
		//		HannanumParser iParser = new HannanumParser();
		//		KkokkomaParser iParser = new KkokkomaParser();
				Parser iParser = new IntegratedParser();
				
				nextSentence = sentenList.get(i);
				System.out.println(nextSentence);
				TaggedSentence s = iParser.dependencyOf(new String(nextSentence));
				
				for(int j=0; j<s.size(); j++)
				{
					TaggedWord tw = s.getWordAt(j);
				//	System.out.println("========");	
					System.out.println(tw.toString());
					Word word = parserResult(tw.toString());
					printWord(word);
					wordList.add(word);
					System.out.println("========");	
				}
				
				
				classifyResult(wordList);
				printWordList();
			
				
				String lastSentence = s.getLast().getOriginalWord();
				if(sentence.equals(lastSentence))
				{
					break;
				}
				else
				{
				//	sentence.las
					lastIndex = sentence.lastIndexOf(lastSentence);
					lastIndex += lastSentence.length();
					
					if(lastIndex != -1 && nextSentence.length() >= lastIndex)
					{
						prevSentence = sentence.substring(lastIndex, nextSentence.length());
						firstIndex = lastIndex+1;
						sentenList.add(prevSentence);
					}
				}
				wordList.clear();
				s.clear();
				close();
			}
			
			
		}
		catch(Exception e)
		{
			e.getStackTrace();
		}
	}
	
	public void close()
	{
		classfier.clear();
		josaList.clear();
		sentenceList.clear();
	}
	


	
}
