package CONTROL;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.LinkedList;

import javax.security.auth.login.Configuration;

import DATA.Morph;
import DATA.Word;
import kr.kaist.ir.korean.data.ConflictedWord;
import kr.kaist.ir.korean.data.TaggedMorpheme;
import kr.kaist.ir.korean.data.TaggedSentence;
import kr.kaist.ir.korean.data.TaggedWord;
import kr.kaist.ir.korean.parser.IntegratedParser;
import kr.kaist.ir.korean.parser.Parser;

public class ExtractKeyword {
	
	ArrayList<String> sentenList;

	ArrayList<String> josaList = new ArrayList<String>();
	
	public void parseJosa() throws Exception
	{
	 	String path = "C://Users//수인//Desktop//시프//조사//조사_기초.txt";
		
		FileInputStream fileInputStream = new FileInputStream(path);
		InputStreamReader inputStreamReader = new InputStreamReader(fileInputStream, "MS949");
		BufferedReader bufferedReader = new BufferedReader(inputStreamReader);
		boolean check = false;
		boolean result= true;
		int i=0;
		while(result)
		{		
			String str = bufferedReader.readLine();
		
			if(str == null)
			{
				result = false;
				
			}
			else
			{
				for(int j = 0; j<str.length(); j++)
				{
					char c = str.charAt(j);
					if((c >= '\uAC00' && c<= '\uD7AF'))
					{
							
					}
					else
					{
						check = true;
						break;
					}
				}
				
				if(str.length() == 0)
				{
					check = true; 
				}

				
				if(!check)
				{
			//		System.out.println(str);
					josaList.add(str);
					i++;
				}
				check = false;
			}
			
		}
		
		bufferedReader.close();
		inputStreamReader.close();
		fileInputStream.close();
	}
	
	public String setSpace(String sentence)
	{
		ArrayList<String> removalSentence = new ArrayList<String>();
		char c;
	//	char punctuation[] = {'(', '[' , ')', ']' ,'{' , '}', '\'', ',' , '.' ,'?'};
		String punctuation[] = {"(", "[" , ")", " ]" ,"{" , "}","'","\"",",",".", "?"};
		String temp = sentence;
	
		for(int j=0; j<punctuation.length; j++)
		{
			temp.replace(punctuation[j], " ");
		}
		
		System.out.println(temp);
		return temp;
	}
	
	public ArrayList<String> splitSpace(String sentence)
	{
		String[] arr = sentence.split(" ");
		ArrayList<String> frequencyWordList = new ArrayList<String>();
		String word = "";
		char c;
		String punctuation[] = {"(", "[" , ")", " ]" ,"{" , "}","'","\"",",",".", "?"};
		String msg = "";
		
		for(int i=0; i < arr.length; i++)
		{
			word = arr[i];
			msg = word;
			
			for(int j=0 ; j<punctuation.length ; j++)
			{
				String punc = punctuation[j];
				if(word.contains(punc))
	 			{	
	 				int index = word.indexOf(punc);
	 				if(index > 0)
	 					msg =  word.substring(0, index);
	 				else
	 			//		msg = word.substring();
	 				break;
	 			}
			}
			if(msg.length() != 0)
			{
				System.out.println(msg);
				frequencyWordList.add(msg);
			}
		}
		System.out.println("=====");
		return frequencyWordList;
	}

	public String RemoveSpace(String sentence)
	{
		sentence = sentence.replaceAll("\\s", ""); 
		
		return sentence;
	}
	
	public void splitComma(String sentnece)
	{
		System.out.println(sentnece);
		sentenList = new ArrayList<String>();
		String[] sentenceList =  sentnece.split(".");
		
		for(int i=0; i<sentenceList.length; i++)
		{
			String sen =  sentenceList[i];
			sentenList.add(sen);
			System.out.println(sen);
		}
	}
	
	public void getDependent(String sentence)
	{
		Parser iParser = null;

		sentenList = new ArrayList<String>();
		sentenList.add(sentence);
		
		try
		{
			iParser = new IntegratedParser();
			for(int i=0 ; i<sentenList.size(); i++)
			{
				TaggedSentence s = iParser.dependencyOf(sentenList.get(i));
				System.out.println(s + "\n=============");
				for(TaggedWord tw : s)
				{
					System.out.println(tw.getOriginalWord());
					System.out.println(tw.getTag());
					System.out.println(tw.toString());
					parserResult(tw.toString());
					System.out.println("========");
					
				}
				
			}
		
		}
		catch(Exception e)
		{
			
		}
	}
	
	public void parseResult(String result)
	{
		ArrayList<String> resultList = new ArrayList<String>();
		String depents[] = result.split("\n");
		
		for(int i=0; i<depents.length; i++)
		{
			depents[i] = depents[i].replace("\t", "");
			depents[i] = depents[i].replace(" ", "");
			depents[i] = depents[i].replace("|", "");
			
			if(depents[i].length() > 0)
				resultList.add(depents[i]);
		}
		
		for(String msg : resultList)
		{
			System.out.println(msg);
		}
		
		System.out.println("========");

		String splitPro[] = {"(","/",")", "="};
		
		for(String msg : resultList)
		{
			//"=" 기준으로 split
			for(int i =0 ; i < splitPro.length; i++)
			{
				msg = msg.replace(splitPro[i], " ");
			}
			resultList.add(msg);
		}

		System.out.println(resultList.size());
		for(String msg : resultList)
		{
			System.out.println(msg);
		}
	}
	
	public void parserResult(String result)
	{
		ArrayList<String> resultList = new ArrayList<String>();
		ArrayList<String> finalList = new ArrayList<String>();
		String depents[] = result.split("\n");
		for(int i=0; i<depents.length; i++)
		{
			depents[i] = depents[i].replace("\t", "");
			depents[i] = depents[i].replace(" ", "");
			depents[i] = depents[i].replace("|", "");
			
			if(depents[i].length() > 0)
				resultList.add(depents[i]);
		}
		
		for(String msg : resultList)
		{
			System.out.println(msg);
		}
		System.out.println("========");
		
		String splitPro[] = {"(","/",")","=",":"};
		
		//참조 이후 제거
	/*	if(resultList.contains("[참조]"))
		{
			int index = resultList.indexOf("[참조]");
		
			for(int i = index; i<resultList.size(); i++)
			{
				resultList.remove(resultList.size()-i-1);
			}
			
		}*/
		//출력
		for(String msg : resultList)
		{
			System.out.println(msg);
		}
		System.out.println("=========");
		
		for(String msg : resultList)
		{
			//"=" 기준으로 split
		//	if(msg.contains("="))		
		//	{
			/*	String tmp[] = msg.split("=");
				Word word = new Word();
				
				word.setWordName(tmp[0]);
				
				for(int i=0 ;i<splitPro.length; i++)
				{
					tmp[1] = tmp[1].replace(splitPro[i], " ");
				}
				String tmp2[] = tmp[1].split(" ");
				ArrayList<Morph> mpList = new ArrayList<Morph>();
				for(int j=0 ; j<tmp2.length/3; j=j+3)
				{
					String a = tmp2[j];
					Morph mp = new Morph();
					mp.setMorphName(a);
					mp.setOldTag(tmp2[j+1]);
					mp.setTag(tmp2[j+2]);
					mpList.add(mp);
				}
				
				System.out.println(tmp[1]);*/
			//}
			
			for(int i=0 ;i<splitPro.length; i++)
			{
				msg = msg.replace(splitPro[i], " ");
			}
			finalList.add(msg);
		}
		for(int i=0 ;i<finalList.size();i++)
		{
			System.out.println(finalList.get(i));
		}
		boolean isdepent = false;
		
		for(int i=0; i<finalList.size();i++)
		{
			String e = finalList.get(i);
			if(e.equals("[골격구성]"))
			{
				isdepent = true;
				continue;
			}
			else if(e.equals("[참조]"))
			{
				break;
			}
			else
			{
				String tmp[] = e.split(" ");
				
				Word word = new Word();
				word.setWordName(tmp[0]);
				
				for(int j=1; j<(tmp.length-1)/3; j=j+3)
				{
					Morph mp = new Morph();
					mp.setMorphName(tmp[j]);
					mp.setOldTag(tmp[j+1]);
					mp.setTag(tmp[j+2]);
				}
			}
		}
		
		//System.out.println(result);
	}
	
	public void parseKorean(String sentence)
	{
		Parser iParser = null;

		sentenList = new ArrayList<String>();
		sentenList.add(sentence);
		try
		{
			iParser = new IntegratedParser();
	
			for(int i = 0; i< sentenList.size(); i++)
			{
				TaggedSentence s = iParser.dependencyOf(sentenList.get(i));
				System.out.println(s.toString());
				for(int j=0; j<s.size(); j++)
				{
					TaggedWord w = s.getWordAt(j);
					LinkedList<TaggedWord> dependents =  w.getDependents();
					
					System.out.print(w.getOriginalWord());
					System.out.print(" : ");
					System.out.print(w.getTag());
					System.out.print(" : ");
					System.out.print(w.getRawTag());
					System.out.println();
					
				//	if(dependents.size() > 0)
					//{
						System.out.println("[의존사]");
						
						for(TaggedWord dp : dependents)
						{
					//		LinkedList<TaggedWord> dependentsDp = dp.getDependents();
					/*		for(TaggedMorpheme m : dp)
							{
								System.out.println(m.toString());
								System.out.println(m.getMorpheme());
							}*/
							System.out.print( "\t" + dp.getOriginalWord());
							System.out.print(" : ");
							System.out.print(dp.getTag());
							System.out.print(" : ");
							System.out.print(dp.getRawTag());
							System.out.println();
							System.out.println(dp.toString());
							LinkedList<TaggedWord> dependentsDp = dp.getDependents();
							ConflictedWord cw = (ConflictedWord)dp;
							System.out.println(cw.getOriginalWord());
							/*for(TaggedWord cw : dependentsDp)
							{
								System.out.println(cw.getOriginalWord());
							}*/
									
				//			dp.getDependents();
							 
							/*if(dependentsDp.size() > 0)
							{
								System.out.println( "\t\t" + "[의존사]");
								
								 for(TaggedWord dp2 : dependentsDp )
								 {
									 System.out.print( dp2.getOriginalWord());
									 System.out.print(" : ");
									 System.out.print(dp2.getTag());
									 System.out.print(" : ");
									 System.out.print(dp2.getRawTag());
									 System.out.println();
								}
							 }*/
						}
				//	}
					System.out.println("====");
				}
			}

		}
		catch(Exception e)
		{
			e.getStackTrace();
		}
		
	}
	
}
